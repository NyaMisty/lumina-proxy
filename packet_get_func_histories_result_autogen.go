// This file is automatically generated. DO NOT MODIFY!

package lumina

func (this *FuncHistoryData) readFrom(r Reader) (err error) {
	// Field this.Name
	// Basic string
	if this.Name, err = readString(r); err != nil {
		return
	}
	// Field this.Metadata
	// Slice []byte
	var v1 uint32
	if v1, err = readUint32(r); err != nil {
		return
	}
	this.Metadata = make([]byte, v1)
	if err = readBytes(r, this.Metadata); err != nil {
		return
	}
	return
}

func (this *FuncHistoryData) writeTo(w Writer) (err error) {
	// Field this.Name
	// Basic string
	if err = writeString(w, this.Name); err != nil {
		return
	}
	// Field this.Metadata
	// Slice []byte
	if len(this.Metadata) > 0x7FFFFFFF {
		err = errTooLong
		return
	}
	var v1 = uint32(len(this.Metadata))
	if err = writeUint32(w, v1); err != nil {
		return
	}
	if err = writeBytes(w, this.Metadata); err != nil {
		return
	}
	return
}

func (this *FuncHistoryBase) readFrom(r Reader) (err error) {
	// Field this.Unknown1
	// Basic uint64
	if this.Unknown1, err = readUint64(r); err != nil {
		return
	}
	// Field this.Unknown2
	// Basic uint64
	if this.Unknown2, err = readUint64(r); err != nil {
		return
	}
	// Field this.Data
	// Struct FuncHistoryData
	if err = this.Data.readFrom(r); err != nil {
		return
	}
	return
}

func (this *FuncHistoryBase) writeTo(w Writer) (err error) {
	// Field this.Unknown1
	// Basic uint64
	if err = writeUint64(w, this.Unknown1); err != nil {
		return
	}
	// Field this.Unknown2
	// Basic uint64
	if err = writeUint64(w, this.Unknown2); err != nil {
		return
	}
	// Field this.Data
	// Struct FuncHistoryData
	if err = this.Data.writeTo(w); err != nil {
		return
	}
	return
}

func (this *FuncHistory) readFrom(r Reader) (err error) {
	// Field this.FuncHistoryBase
	// Struct FuncHistoryBase
	if err = this.FuncHistoryBase.readFrom(r); err != nil {
		return
	}
	// Field this.Timestamp
	// Basic uint64
	// Typed UtcTimestamp
	var v1 uint64
	if v1, err = readUint64(r); err != nil {
		return
	}
	this.Timestamp = UtcTimestamp(v1)
	// Field this.AuthorIdx
	// Basic uint32
	if this.AuthorIdx, err = readUint32(r); err != nil {
		return
	}
	// Field this.IdbPathIdx
	// Basic uint32
	if this.IdbPathIdx, err = readUint32(r); err != nil {
		return
	}
	return
}

func (this *FuncHistory) writeTo(w Writer) (err error) {
	// Field this.FuncHistoryBase
	// Struct FuncHistoryBase
	if err = this.FuncHistoryBase.writeTo(w); err != nil {
		return
	}
	// Field this.Timestamp
	// Basic uint64
	// Typed UtcTimestamp
	if err = writeUint64(w, uint64(this.Timestamp)); err != nil {
		return
	}
	// Field this.AuthorIdx
	// Basic uint32
	if err = writeUint32(w, this.AuthorIdx); err != nil {
		return
	}
	// Field this.IdbPathIdx
	// Basic uint32
	if err = writeUint32(w, this.IdbPathIdx); err != nil {
		return
	}
	return
}

func (*GetFuncHistoriesResultPacket) getType() PacketType {
	return PKT_GET_FUNC_HISTORIES_RESULT
}

func (this *GetFuncHistoriesResultPacket) readFrom(r Reader) (err error) {
	// Field this.Codes
	// Slice []OpResult
	var v1 uint32
	if v1, err = readUint32(r); err != nil {
		return
	}
	this.Codes = make([]OpResult, v1)
	for v2 := uint32(0); v2 < v1; v2++ {
		// Field this.Codes[v2]
		// Basic int32
		// Typed OpResult
		var v3 int32
		if v3, err = readInt32(r); err != nil {
			return
		}
		this.Codes[v2] = OpResult(v3)
	}
	// Field this.Funcs
	// Slice []FuncHistories
	var v4 uint32
	if v4, err = readUint32(r); err != nil {
		return
	}
	this.Funcs = make([]FuncHistories, v4)
	for v5 := uint32(0); v5 < v4; v5++ {
		// Field this.Funcs[v5]
		// Slice []FuncHistory
		var v6 uint32
		if v6, err = readUint32(r); err != nil {
			return
		}
		this.Funcs[v5] = make([]FuncHistory, v6)
		for v7 := uint32(0); v7 < v6; v7++ {
			// Field this.Funcs[v5][v7]
			// Struct FuncHistory
			if err = this.Funcs[v5][v7].readFrom(r); err != nil {
				return
			}
		}
	}
	// Field this.Authors
	// Slice []string
	var v8 uint32
	if v8, err = readUint32(r); err != nil {
		return
	}
	this.Authors = make([]string, v8)
	for v9 := uint32(0); v9 < v8; v9++ {
		// Field this.Authors[v9]
		// Basic string
		if this.Authors[v9], err = readString(r); err != nil {
			return
		}
	}
	// Field this.IdbPaths
	// Slice []string
	var v10 uint32
	if v10, err = readUint32(r); err != nil {
		return
	}
	this.IdbPaths = make([]string, v10)
	for v11 := uint32(0); v11 < v10; v11++ {
		// Field this.IdbPaths[v11]
		// Basic string
		if this.IdbPaths[v11], err = readString(r); err != nil {
			return
		}
	}
	return
}

func (this *GetFuncHistoriesResultPacket) writeTo(w Writer) (err error) {
	// Field this.Codes
	// Slice []OpResult
	if len(this.Codes) > 0x7FFFFFFF {
		err = errTooLong
		return
	}
	var v1 = uint32(len(this.Codes))
	if err = writeUint32(w, v1); err != nil {
		return
	}
	for v2 := uint32(0); v2 < v1; v2++ {
		// Field this.Codes[v2]
		// Basic int32
		// Typed OpResult
		if err = writeInt32(w, int32(this.Codes[v2])); err != nil {
			return
		}
	}
	// Field this.Funcs
	// Slice []FuncHistories
	if len(this.Funcs) > 0x7FFFFFFF {
		err = errTooLong
		return
	}
	var v4 = uint32(len(this.Funcs))
	if err = writeUint32(w, v4); err != nil {
		return
	}
	for v5 := uint32(0); v5 < v4; v5++ {
		// Field this.Funcs[v5]
		// Slice []FuncHistory
		if len(this.Funcs[v5]) > 0x7FFFFFFF {
			err = errTooLong
			return
		}
		var v6 = uint32(len(this.Funcs[v5]))
		if err = writeUint32(w, v6); err != nil {
			return
		}
		for v7 := uint32(0); v7 < v6; v7++ {
			// Field this.Funcs[v5][v7]
			// Struct FuncHistory
			if err = this.Funcs[v5][v7].writeTo(w); err != nil {
				return
			}
		}
	}
	// Field this.Authors
	// Slice []string
	if len(this.Authors) > 0x7FFFFFFF {
		err = errTooLong
		return
	}
	var v8 = uint32(len(this.Authors))
	if err = writeUint32(w, v8); err != nil {
		return
	}
	for v9 := uint32(0); v9 < v8; v9++ {
		// Field this.Authors[v9]
		// Basic string
		if err = writeString(w, this.Authors[v9]); err != nil {
			return
		}
	}
	// Field this.IdbPaths
	// Slice []string
	if len(this.IdbPaths) > 0x7FFFFFFF {
		err = errTooLong
		return
	}
	var v10 = uint32(len(this.IdbPaths))
	if err = writeUint32(w, v10); err != nil {
		return
	}
	for v11 := uint32(0); v11 < v10; v11++ {
		// Field this.IdbPaths[v11]
		// Basic string
		if err = writeString(w, this.IdbPaths[v11]); err != nil {
			return
		}
	}
	return
}
